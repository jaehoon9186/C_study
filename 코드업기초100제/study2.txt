

* 컴파일링, 어셈블링, 링킹
stdio.h : 라이브러리 / 헤더파일, c언어로 작성되어있으며 파일명이 .h
        printf 의 프로토타입이 있음. 

컴파일 clang hello.c
실행   ./a.out  ( a.out은 0,1로 가득찬 파일)

-다른이름으로 컴파일 하기 위해선(a.out이 아닌)
컴파일 clang -o hello hello.c

-라이브러리를 사용한 프로그램을 컴파일 할때
컴파일 clang -o hello hello.c -lcs50 


* 컴파일의 과정 
전처리(Precompile) > 컴파일(Compile) > 어셈블(Assemble) > 링크(Link)
- 전처리 
    전처리기에 의해 수행,
    소스코드(#~~) to 전처리기
        ㄴ 전처리기야 이것좀 컴파일 전에 먼저 실행해줘
                    ㄴ ok (수행) 
    ex) #include : 전처리기에게 다른 파일의 내용을 포함시키라고 알려줌.  
        전처리기 : 새로운 파일을 c소스코드로 만들어 #include 위치에 포함시킴

- 컴파일
    컴파일러에 의해 수행, 컴퓨터가 이해할 수 있는 언어와 최대한 가까운 프로그램으로 만듬
    c코드 > 어셈블리어(저수준 프로그래밍 언어)
        (변환)
    어셈블리 : c보다 연산의 종류는 적다. 하지만 여러연산이 합쳐져 c의 모든것 수행 가능
    
    컴파일 : 소스코드에서 오브젝트 코드로 변환하는 전체 과정을 통틀어 일컫기도 하지만,
    구체적으로 전처리한 소스코드를 어셈블리 코드로 변환시키는 단계를 말하기도함. 

- 어셈블
    어셈블러에 의해 수행
    어셈블리어 > 오브젝트 코드(0,1로 구성)
            (변환)
    중앙처리장치가 이해할 수 있도록 0,1로 구성된 코드로 바꿔줌

    컴파일 되야할 파일이 하나면 여기까지 아니면 링크 단계도 수행

- 링크
    링커에 의해 수행
    여러개의 파일로 이루어져 있어 하나의 오브젝트 파일로 합쳐야 할때
    (ex #include <math.h> 등 .)
    여러개의 다른 오브젝트 코드 파일을 실행가능한 하나의 오브젝트 코드 파일로 합쳐줌. 


* 디버깅


